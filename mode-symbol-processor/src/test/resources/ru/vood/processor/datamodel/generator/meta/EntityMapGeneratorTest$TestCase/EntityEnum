package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.String
import ru.vood.dmgen.`annotation`.FlowEntityType
import ru.vood.dmgen.`annotation`.MetaEntities
import ru.vood.dmgen.datamodel.sealedData.DealDetail
import ru.vood.dmgen.datamodel.sealedData.DealEntity
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateDetail
import ru.vood.dmgen.datamodel.sealedData.DealParamaggregateEntity
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkDetail
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamDetail
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.intf.EntityData
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityData
import ru.vood.dmgen.datamodel.sealedData.intf.SealedEntityData
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataDetail
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataDetail
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoDetail
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity

@Generated(value = ["ru.vood.processor.datamodel.generator.meta.EntityMapGenerator"])
@MetaEntities
public enum class EntityEnum {
  Deal,
  DealOneData,
  DealParamaggregate,
  DealTwoData,
  NoFKAndUk,
  OneOfDto,
  OptionalDealParam,
  ;

  public fun entityData(): IEntityData = entityDataMap[this]!!

  public companion object {
    private val entityDataMap:
        EnumMap<ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum, IEntityData> = EnumMap(
      mapOf(
            Deal to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.Deal::class,
                runtimeClass = DealEntity::class,
                runtimeSyntheticClass = DealDetail::class,
                serializer = DealEntity.serializer(),
                serializerSynthetic = DealDetail.serializer(),
                entityName = Deal,
                comment = "Это сущность Сделка",
                entityType = FlowEntityType.AGGREGATE
                ),
            DealParamaggregate to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.DealParamaggregate::class,
                runtimeClass = DealParamaggregateEntity::class,
                runtimeSyntheticClass = DealParamaggregateDetail::class,
                serializer = DealParamaggregateEntity.serializer(),
                serializerSynthetic = DealParamaggregateDetail.serializer(),
                entityName = DealParamaggregate,
                comment = "Параметр сделки, Агрегат",
                entityType = FlowEntityType.AGGREGATE
                ),
            NoFKAndUk to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.NoFKAndUk::class,
                runtimeClass = NoFKAndUkEntity::class,
                runtimeSyntheticClass = NoFKAndUkDetail::class,
                serializer = NoFKAndUkEntity.serializer(),
                serializerSynthetic = NoFKAndUkDetail.serializer(),
                entityName = NoFKAndUk,
                comment = "Параметр сделки, отношение к сделке один к одному",
                entityType = FlowEntityType.INNER
                ),
            OptionalDealParam to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.OptionalDealParam::class,
                runtimeClass = OptionalDealParamEntity::class,
                runtimeSyntheticClass = OptionalDealParamDetail::class,
                serializer = OptionalDealParamEntity.serializer(),
                serializerSynthetic = OptionalDealParamDetail.serializer(),
                entityName = OptionalDealParam,
                comment = "Параметр сделки, отношение к сделке один к одному, опциональный",
                entityType = FlowEntityType.INNER
                ),
            OneOfDto to SealedEntityData(
            designClass = ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto::class,
            runtimeClass = OneOfDtoEntity::class,
            runtimeSyntheticClass = OneOfDtoDetail::class,
            serializer = OneOfDtoEntity.serializer(),
            serializerSynthetic = OneOfDtoDetail.serializer(),
            entityName = OneOfDto,
            comment = "Параметр сделки, отношение к сделке один к одному",
            entityType = FlowEntityType.ONE_OF,
            children = setOf(
                  DealOneData,
                  DealTwoData,
            )
            ),
            DealOneData to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneData::class,
                runtimeClass = DealOneDataEntity::class,
                runtimeSyntheticClass = DealOneDataDetail::class,
                serializer = DealOneDataEntity.serializer(),
                serializerSynthetic = DealOneDataDetail.serializer(),
                entityName = DealOneData,
                comment = "Параметр сделки, отношение к сделке один к одному",
                entityType = FlowEntityType.INNER
                ),
            DealTwoData to EntityData(
                designClass = ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoData::class,
                runtimeClass = DealTwoDataEntity::class,
                runtimeSyntheticClass = DealTwoDataDetail::class,
                serializer = DealTwoDataEntity.serializer(),
                serializerSynthetic = DealTwoDataDetail.serializer(),
                entityName = DealTwoData,
                comment = "Параметр сделки, отношение к сделке один к одному",
                entityType = FlowEntityType.INNER
                ),
            ))

            public fun entityMetaByStr(`value`: String):
                ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum = when(value) {
              "Deal" -> Deal
              "DealParamaggregate" -> DealParamaggregate
              "NoFKAndUk" -> NoFKAndUk
              "OptionalDealParam" -> OptionalDealParam
              "OneOfDto" -> OneOfDto
              "DealOneData" -> DealOneData
              "DealTwoData" -> DealTwoData
              else -> error("""In ${EntityEnum::class.java.simpleName} not found enum with name
                  $value""")
            }
          }
        }

