package test.metaEnum

import java.util.EnumMap
import javax.`annotation`.processing.Generated
import kotlin.collections.Set
import ru.vood.dmgen.`annotation`.MetaFKs
import ru.vood.dmgen.datamodel.sealedData.Deal_PKContext
import ru.vood.dmgen.datamodel.sealedData.NoFKAndUkEntity
import ru.vood.dmgen.datamodel.sealedData.OptionalDealParamEntity
import ru.vood.dmgen.datamodel.sealedData.intf.FKMetaData
import ru.vood.dmgen.datamodel.sealedData.intf.FkPair
import ru.vood.dmgen.datamodel.sealedData.intf.IEntityOrigin
import ru.vood.dmgen.datamodel.sealedData.metaEnum.EntityEnum
import ru.vood.dmgen.datamodel.sealedData.metaEnum.FullColumnNameEnum
import ru.vood.dmgen.datamodel.sealedData.metaEnum.UniqueKeyEnum
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealOneDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.DealTwoDataEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDtoEntity
import ru.vood.dmgen.datamodel.sealedData.oneOf.OneOfDto_PKContext
import ru.vood.dmgen.dto.RelationType

@Generated(value = ["ru.vood.processor.datamodel.generator.meta.ForeignKeyMapGenerator"])
@MetaFKs
public enum class FkNameEnum {
  NoFKAndUk_FK,
  OptionalDealParam_FK,
  OneOfDto_FK,
  DealOneData_FK,
  DealTwoData_FK,
  ;

  public companion object {
    public val foreignKeyMap:
        EnumMap<ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum, FKMetaData<out IEntityOrigin>>
        = EnumMap(
      mapOf(
            ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum.NoFKAndUk_FK to FKMetaData(
            fromEntity = EntityEnum.NoFKAndUk,
            toEntity = EntityEnum.Deal,
            uk = UniqueKeyEnum.Deal_PK,
            relationType = RelationType.MANY_TO_ONE,
            fkCols = setOf(
            FkPair(FullColumnNameEnum.NoFKAndUk_dealId, FullColumnNameEnum.Deal_id),
            ),
            сontextExtractor = {data: NoFKAndUkEntity -> Deal_PKContext(
            data.dealId,
            ) }
            ),
            ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum.OptionalDealParam_FK to
                FKMetaData(
            fromEntity = EntityEnum.OptionalDealParam,
            toEntity = EntityEnum.Deal,
            uk = UniqueKeyEnum.Deal_PK,
            relationType = RelationType.ONE_TO_ONE_OPTIONAL,
            fkCols = setOf(
            FkPair(FullColumnNameEnum.OptionalDealParam_dealId, FullColumnNameEnum.Deal_id),
            ),
            сontextExtractor = {data: OptionalDealParamEntity -> Deal_PKContext(
            data.dealId,
            ) }
            ),
            ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum.DealOneData_FK to FKMetaData(
            fromEntity = EntityEnum.DealOneData,
            toEntity = EntityEnum.OneOfDto,
            uk = UniqueKeyEnum.OneOfDto_PK,
            relationType = RelationType.ONE_TO_ONE_MANDATORY,
            fkCols = setOf(
            FkPair(FullColumnNameEnum.DealOneData_dealId, FullColumnNameEnum.OneOfDto_dealId),
            ),
            сontextExtractor = {data: DealOneDataEntity -> OneOfDto_PKContext(
            data.dealId,
            ) }
            ),
            ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum.DealTwoData_FK to FKMetaData(
            fromEntity = EntityEnum.DealTwoData,
            toEntity = EntityEnum.OneOfDto,
            uk = UniqueKeyEnum.OneOfDto_PK,
            relationType = RelationType.ONE_TO_ONE_MANDATORY,
            fkCols = setOf(
            FkPair(FullColumnNameEnum.DealTwoData_dealId, FullColumnNameEnum.OneOfDto_dealId),
            ),
            сontextExtractor = {data: DealTwoDataEntity -> OneOfDto_PKContext(
            data.dealId,
            ) }
            ),
            ru.vood.dmgen.datamodel.sealedData.metaEnum.FkNameEnum.OneOfDto_FK to FKMetaData(
            fromEntity = EntityEnum.OneOfDto,
            toEntity = EntityEnum.Deal,
            uk = UniqueKeyEnum.Deal_PK,
            relationType = RelationType.ONE_TO_ONE_MANDATORY,
            fkCols = setOf(
            FkPair(FullColumnNameEnum.OneOfDto_dealId, FullColumnNameEnum.Deal_id),
            ),
            сontextExtractor = {data: OneOfDtoEntity -> Deal_PKContext(
            data.dealId,
            ) }
            ),
            )
            )


            /**
             * В качестве ключа первой мапки выступает идентификатор сущности от которой идет FK. В
             * качестве ключа второй, вложенной мапки, выступает идентификатор сущности в которую идет
             * FK
             */
            public val fromToFkMap:
                EnumMap<EntityEnum, EnumMap<EntityEnum, FKMetaData<out IEntityOrigin>>> = EnumMap(
            foreignKeyMap.values
                                    .map { fk ->
                                        fk.fromEntity to EnumMap(foreignKeyMap.values.filter {
                    it.fromEntity == fk.fromEntity }
                                            .map { fk2 -> fk2.toEntity to fk2 }.toMap())
                                    }.toMap()
            )


            public val foreignKeyMapFromEntity:
                EnumMap<EntityEnum, Set<FKMetaData<out IEntityOrigin>>> = EnumMap(
            foreignKeyMap.values
                        .map {fkMetaData->
                            fkMetaData.fromEntity to fkMetaData
                        }
                        .groupBy { it.first }
                        .map { it.key to it.value.map { q -> q.second }.toSet() }
                        .toMap()
            )


            public fun getFk(fromEntity: EntityEnum, toEntity: EntityEnum) =
                (fromToFkMap[fromEntity] ?:
            error("""Not found any foreign key from entity $fromEntity"""))[toEntity]?:
            error("""Not found any foreign key from entity $fromEntity to entity $toEntity""")
          }
        }

